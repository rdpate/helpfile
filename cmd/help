#!/bin/sh -ue

base_prog="$(readlink -f "$0")"
fatal() {
    printf %s\\n "$base_prog error: $2" >&2
    exit "$1"
}

section=help
locate_flags=
format_short=
format_wrap=
user_lang=
if [ -t 1 ]; then
    stdout_terminal=true
else
    stdout_terminal=false
fi
handle_option() {
    case "$1" in
        c|command)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            locate_flags="$locate_flags --command"
            ;;
        debug-locations)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            locate_flags="$locate_flags --debug-locations"
            ;;
        lang)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            user_lang="$2"
            ;;
        section)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            [ -n "$2" ] || fatal 64 "empty value for option $1"
            section="$2"
            ;;
        s|short)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            format_short=--short
            ;;
        v|version)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            section=version
            ;;
        wrap)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            if [ 0 = "$2" ]; then
                format_wrap=--wrap=0
            else
                if [ x"$2" != x"$(printf %s "$2" | tr -c -d 0-9)" ]; then
                    fatal 64 "invalid numeric value for option $1"
                fi
                format_wrap="--wrap=$2"
            fi
            ;;
        no-wrap)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            format_wrap=--wrap=0
            ;;
        *)
            fatal 64 "unknown option: $1"
            ;;
    esac
}

while [ $# -gt 0 ]; do
    case "$1" in
        --)
            shift
            break;;
        --*=*)
            x="${1#--}"
            handle_option "${x%%=*}" "${x#*=}"
            shift;;
        --*)
            handle_option "${1#--}"
            shift;;
        -?*)
            if [ ${#1} = 2 ]; then
                handle_option "${1#-}"
            else
                v="${1#??}"
                x="${1%"$v"}"
                handle_option "${x#-}" "$v"
            fi
            shift;;
        *)
            break;;
    esac
done


if [ $# -eq 0 ]; then
    fatal 64 'expected arguments: NAME [SUBTOPIC..]'
fi

helpfile_locate() { # NAME [SUBTOPIC..]
    "$(dirname "$base_prog")/locate" \
        --format=txt \
        --section="$section" \
        --lang="$user_lang" \
        $locate_flags \
        -- "$@"
}
helpfile_format_txt() { # [FILE]
    "$(dirname "$base_prog")/format-txt-fw" $format_short $format_wrap -- "$@"
}
main() {
    local target type format section
    target="$(helpfile_locate "$@")" || exit $?
    type="${target%% *}"
    target="${target#* }"
    if [ file = "$type" ]; then
        format="${target#*.*.}"
        case "$format" in
            txt)
                helpfile_format_txt "$target"
                ;;
            *)
                fatal 69 "unknown file format: $target"
                ;;
        esac
        return 0
    fi
    section="${target%% *}"
    target="${target#* }"
    case "$type" in
        man)
            exec man "$section" "$target"
            ;;
        internal)
            show_internal_section "$section" "$target" || fatal 70 'unable to read internal section'
            return 0
            ;;
        *)
            fatal 70 "unknown help type: $type $section $target"
            ;;
    esac
}

show_internal_section() { # SECTION FILE
    local line
    sed -r 's/ +$//' "$2" | \
    while :; do
        read -r line || return 2
        case "$line" in
            "#.$1")
                internal_section_extract_text | helpfile_format_txt
                return 0
                ;;
            '#'*)
                ;;
            *)
                return 2
                ;;
        esac
    done
}
internal_section_extract_text() { # <lines
    # Read lines from stdin until end of section; write to stdout.
    local line
    while :; do
        read -r line || return 0
        case "$line" in
            '##'*)
                ;;
            '# '*)
                printf %s\\n "${line#??}"
                ;;
            '#')
                printf \\n
                ;;
            *)
                break
                ;;
        esac
    done
}

main "$@"
