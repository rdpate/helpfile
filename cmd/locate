#!/bin/sh -ue

fatal() { rc="$1"; shift; printf %s\\n "${0##*/} error: $*" >&2 || true; exit "$rc"; }
nonfatal() { printf %s\\n "${0##*/}: $*" >&2 || true; }

search=false
section=help
user_lang=
user_lang_country=
first_lang_file=
pref_formats=
show_all=false
path_lookup=false
debug_locations=false
handle_option() {
    local x
    case "$1" in
        a|all)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            show_all=true
            ;;
        c|command)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            path_lookup=true
            ;;
        debug-locations)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            debug_locations=true
            ;;
        format)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            x="$(printf %s "$2" | LC_ALL=C tr -d -c \\-A-Za-z0-9,_)"
            if [ x"$x" != x"$2" ]; then
                fatal 64 "invalid --$1 value: disallowed characters"
            fi
            pref_formats="$(printf %s "$2" | tr , ' ')"
            case "$pref_formats" in
                *'  '*|' '*|*' ') fatal 64 "invalid --$1 value: empty format in list" ;;
            esac
            pref_formats=" $pref_formats "
            ;;
        lang)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            user_lang_country="$2"
            ;;
        search)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            search=true
            ;;
        section)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            [ -n "$2" ] || fatal 64 "empty value for option $1"
            section="$2"
            ;;
        v|version)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            search=true
            section=version
            ;;
        legal)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            search=true
            section=legal
            ;;
        *)
            fatal 64 "unknown option: $1"
            ;;
    esac
}
while [ $# -gt 0 ]; do
    case "$1" in
        --)
            shift
            break;;
        --*=*)
            x="${1#--}"
            handle_option "${x%%=*}" "${x#*=}"
            shift;;
        --*)
            handle_option "${1#--}"
            shift;;
        -?*)
            if [ ${#1} = 2 ]; then
                handle_option "${1#-}"
            else
                v="${1#??}"
                x="${1%"$v"}"
                handle_option "${x#-}" "$v"
            fi
            shift;;
        *)
            break;;
    esac
done

if [ $# -eq 0 ]; then
    fatal 64 'expected arguments: NAME'
else
    check_args() {
        if [ -z "$1" ]; then
            fatal 64 'invalid TOPIC: empty argument'
        fi
        shift
        while [ $# != 0 ]; do
            case "$1" in
                '')
                    fatal 64 'invalid TOPIC: empty argument'
                    ;;
                /)
                    fatal 64 'invalid TOPIC: bad name'
                    ;;
            esac
            shift
        done
    }
    check_args "$@"
fi

check_user_lang_country() {
    user_lang_country="$(printf %s "${user_lang_country%%.*}" | tr A-Z a-z)"
    case "$user_lang_country" in
        [abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz])
            user_lang="$user_lang_country"
            user_lang_country=
            ;;
        [abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz]_[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz])
            user_lang="${user_lang_country%_*}"
            ;;
        *)
            user_lang=
            user_lang_country=
            return 1
            ;;
    esac
}
if [ -n "$user_lang_country" ]; then
    case "$user_lang_country" in
        any)
            user_lang=
            user_lang_country=
            ;;
        *)
            check_user_lang_country || fatal 64 'invalid --lang value'
            ;;
    esac
else
    for user_lang_country in "${LC_ALL:-}" "${LC_CTYPE:-}" "${LANG:-}"; do
        if check_user_lang_country; then
            break
        fi
    done
fi

main() {
    local manpage file topic
    manpage=
    if $path_lookup; then
        case "$1" in
            */*|.|..) ;;
            *)
                if [ help = "$section" -a $# = 1 ]; then
                    case "$1" in
                        *' '*) ;;
                        *) manpage="$1" ;;
                    esac
                fi
                file="$(which "$1" 2>/dev/null)" || fatal 69 "not found in PATH: $1"
                shift
                set -- "$file" "$@"
                ;;
        esac
    fi
    topic="$(printf /%s "$@" | sed -r 's,^/,,; s,//+,/,g; s,/+$,,')"
    case "$topic" in
        '') topic=/ ;;
        /*) ;;
        *) topic="$(pwd)/$topic" ;;
    esac
    case "$topic" in
        /) ;;
        /*)
            topic="${topic#/}"
            file="/${topic%%/*}"
            topic="${topic#*/}"
            # resolve symlinks
            while [ -e "$file" ]; do
                case "$topic" in
                    '')
                        file="$(readlink -f "$file")"
                        break
                        ;;
                    ./*) topic="${topic#./}" ;;
                    .) topic= ;;
                    */*)
                        file="$(readlink -f "$file")/${topic%%/*}"
                        topic="${topic#*/}"
                        ;;
                    *)
                        file="$(readlink -f "$file")/$topic"
                        topic=
                        ;;
                esac
            done
            # canonicalize leftover topic
            while [ -n "$topic" ]; do
                case "$topic" in
                    ./*) topic="${topic#./}" ;;
                    .) topic= ;;
                    ../*|..) fatal 64 'invalid ".." in TOPIC' ;;
                    */*)
                        file="$file/${topic%%/*}"
                        topic="${topic#*/}"
                        ;;
                    *)
                        file="$file/$topic"
                        topic=
                        ;;
                esac
            done
            topic="$file"
            ;;
        *) fatal 70 'internal error: non-absolute topic' ;;
    esac
    if $show_all; then
        find_helpfile "$section" "$topic" || true
        find_adjacent_file "$section" "$topic" || true
        find_internal_section "$section" "$topic" || true
        find_fallback "$section" "$topic" || true
        if $search; then
            while [ / != "$topic" ]; do
                topic="$(dirname "$topic")"
                find_helpfile "$section" "$topic" || true
                find_adjacent_file "$section" "$topic" || true
                find_internal_section "$section" "$topic" || true
                find_fallback "$section" "$topic" || true
            done
        fi
        if [ -n "$manpage" ]; then
            printf 'man 1 %s\n' "$manpage"
        fi
    else
        while true; do
            if find_helpfile "$section" "$topic"; then
                return 0
            elif find_adjacent_file "$section" "$topic"; then
                return 0
            elif find_internal_section "$section" "$topic"; then
                return 0
            elif find_fallback "$section" "$topic"; then
                return 0
            fi
            $search || break
            [ / != "$topic" ] || break
            topic="$(dirname "$topic")"
        done
        if [ -n "$manpage" ]; then
            printf 'man 1 %s\n' "$manpage"
            return 0
        fi
        fatal 69 "$section not found: $*"
    fi
}

find_helpfile() { # SECTION TOPIC
    local left right dir
    left=
    right="${2#/}"
    while true; do
        if [ -n "$right" ]; then
            dir="$left/help$(printf %s "/$right" | sed -r 's,/\.+,/,g')"
        else
            dir="$left/help"
        fi
        if [ -d "$dir" ]; then
            if $debug_locations; then
                nonfatal "trying files $dir/$1.LANG.FORMAT"
            fi
            if find_helpfile_lang_format "$dir/$1"; then
                $show_all || return 0
            fi
        elif $debug_locations; then
            nonfatal "skip non-directory $dir"
        fi
        [ -n "$right" ] || break
        case "$right" in
            */*)
                left="$left/${right%%/*}"
                right="${right#*/}"
                ;;
            *)
                left="$left/$right"
                right=
                ;;
        esac
        if [ ! -d "$left" ]; then
            if $debug_locations; then
                nonfatal "skip non-directory prefix $left"
            fi
            break
        fi
    done
    if [ $show_all = false -a -n "$first_lang_file" ]; then
        printf 'file %s\n' "$first_lang_file"
        return 0
    fi
    return 2
}

find_helpfile_lang_format() { # BASE
    local lang target format
    # TODO: check both conditions: pref_formats doesn't seem to be used in 'else'
    # make sure first_lang_file is only set if not show_all
    if [ -n "$user_lang" ]; then
        for format in $pref_formats; do
            for lang in $user_lang_country $user_lang any; do
                target="$1.$lang.$format"
                [ -e "$target" ] || continue
                [ -n "$first_lang_file" ] || first_lang_file="$target"
                printf 'file %s\n' "$target"
                $show_all || return 0
            done
        done
        for lang in $user_lang_country $user_lang any; do
            for target in "$1.$lang."*; do
                [ -e "$target" ] || continue
                format="${target#"$1".*.}"
                case "$format" in
                    '')
                        if $debug_locations; then
                            nonfatal "ignoring bad format: $target"
                        fi
                        continue
                        ;;
                esac
                case "$pref_formats" in
                    *" $format "*) continue ;;
                esac
                [ -n "$first_lang_file" ] || first_lang_file="$target"
                printf 'file %s\n' "$target"
                $show_all || return 0
            done
        done
        [ -z "$first_lang_file" ] || return 1
        for target in "$1."[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz].* "$1."[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz]_[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz].*; do
            [ -e "$target" ] || continue
            format="${target#"$1".*.}"
            case "$format" in
                '')
                    if $debug_locations; then
                        nonfatal "ignoring bad filename: $target"
                    fi
                    continue
                    ;;
            esac
            if $debug_locations; then
                nonfatal "saving as first found: $target"
            fi
            first_lang_file="$target"
            return 1
        done
        return 1
    else
        for format in $pref_formats; do
            for target in "$1.any.$format" "$1."[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz]".$format" "$1."[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz]_[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz]".$format"; do
                [ -e "$target" ] || continue
                [ -n "$first_lang_file" ] || first_lang_file="$target"
                printf 'file %s\n' "$target"
                $show_all || return 0
            done
        done
        for target in "$1.any".* "$1."[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz].* "$1."[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz]_[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz].*; do
            [ -e "$target" ] || continue
            format="${target#"$1".*.}"
            case "$format" in
                '')
                    if $debug_locations; then
                        nonfatal "ignoring bad filename: $target"
                    fi
                    continue
                    ;;
            esac
            case "$pref_formats" in
                *" $format "*) continue ;;
            esac
            [ -n "$first_lang_file" ] || first_lang_file="$target"
            printf 'file %s\n' "$target"
            $show_all || return 0
        done
        return 1
    fi
}

find_adjacent_file() { # SECTION TOPIC
    if [ / = "$2" ]; then
        return 2
    fi
    if $debug_locations; then
        nonfatal "trying files $2.$1.LANG.FORMAT"
    fi
    if find_helpfile_lang_format "$2.$1"; then
        $show_all || return 0
    fi
    if [ $show_all = false -a -n "$first_lang_file" ]; then
        printf 'file %s\n' "$first_lang_file"
        return 0
    fi
    return 2
}

find_internal_section() { # SECTION TOPIC
    # Return 2 if internal section not found.
    if [ ! -f "$2" ]; then
        return 2
    fi
    if $debug_locations; then
        nonfatal "trying internal sections in $2"
    fi
    if sed -r 's/ +$//' "$2" | find_internal_section_read "$1"; then
        printf 'internal %s %s\n' "$1" "$2"
        return 0
    else
        return 2
    fi
}
find_internal_section_read() { # SECTION <lines
    local line
    while :; do
        read -r line || return 2
        case "$line" in
            "#.$1"|"#.$1 "*)
                return 0
                ;;
            '#'*)
                ;;
            *)
                return 2
                ;;
        esac
    done
}

find_fallback() { # SECTION TOPIC
    [ -d "$2" ] || return 2
    if [ / = "$2" ]; then
        set -- "$1" ""
    fi
    if [ help = "$1" ]; then
        if $debug_locations; then
            nonfatal "trying $2/README.{md,txt}"
        fi
        for x in md txt; do
            x="$2/README.$x"
            if [ -e "$x" ]; then
                printf 'file %s\n' "$x"
            fi
        done
    elif [ legal = "$1" ]; then
        if $debug_locations; then
            nonfatal "trying $2/license.{md,txt}"
        fi
        for x in md txt; do
            x="$2/license.$x"
            if [ -e "$x" ]; then
                printf 'file %s\n' "$x"
            fi
        done
    fi
    return 2
}

main "$@"
