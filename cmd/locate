#!/bin/sh -ue

fatal() {
    printf %s\\n "$(readlink -f "$0") error: $2" >&2
    exit "$1"
}

search=false
section=help
user_lang=
user_lang_country=
first_lang_file=
pref_formats=
show_all=false
path_lookup=false
debug_locations=false
handle_option() {
    local x
    case "$1" in
        a|all)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            show_all=true
            ;;
        c|command)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            path_lookup=true
            ;;
        debug-locations)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            debug_locations=true
            ;;
        format)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            x="$(printf %s "$2" | LC_ALL=C tr -d -c \\-A-Za-z0-9,_)"
            if [ x"$x" != x"$2" ]; then
                fatal 64 "invalid --$1 value: disallowed characters"
            fi
            pref_formats="$(printf %s "$2" | tr , ' ')"
            case "$pref_formats" in
                *'  '*|' '*|*' ') fatal 64 "invalid --$1 value: empty format in list" ;;
            esac
            ;;
        lang)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            user_lang_country="$2"
            ;;
        search)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            search=true
            ;;
        section)
            [ $# = 2 ] || fatal 64 "missing value for option $1"
            [ -n "$2" ] || fatal 64 "empty value for option $1"
            section="$2"
            ;;
        v|version)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            search=true
            section=version
            ;;
        legal)
            [ $# = 1 ] || fatal 64 "unexpected value for option $1"
            search=true
            section=legal
            ;;
        *)
            fatal 64 "unknown option: $1"
            ;;
    esac
}

while [ $# -gt 0 ]; do
    case "$1" in
        --)
            shift
            break;;
        --*=*)
            x="${1#--}"
            handle_option "${x%%=*}" "${x#*=}"
            shift;;
        --*)
            handle_option "${1#--}"
            shift;;
        -?*)
            if [ ${#1} = 2 ]; then
                handle_option "${1#-}"
            else
                v="${1#??}"
                x="${1%"$v"}"
                handle_option "${x#-}" "$v"
            fi
            shift;;
        *)
            break;;
    esac
done


if [ $# -eq 0 ]; then
    fatal 64 'expected arguments: NAME'
else
    check_args() {
        if [ -z "$1" ]; then
            fatal 64 'invalid TOPIC: empty argument'
        fi
        shift
        while [ $# != 0 ]; do
            case "$1" in
                '')
                    fatal 64 'invalid TOPIC: empty argument'
                    ;;
                /)
                    fatal 64 'invalid TOPIC: bad name'
                    ;;
            esac
            shift
        done
    }
    check_args "$@"
fi

check_user_lang_country() {
    user_lang_country="$(printf %s "${user_lang_country%%.*}" | tr A-Z a-z)"
    case "$user_lang_country" in
        [abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz])
            user_lang="$user_lang_country"
            user_lang_country=
            ;;
        [abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz]_[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz])
            user_lang="${user_lang_country%_*}"
            ;;
        *)
            user_lang=
            user_lang_country=
            return 1
            ;;
    esac
}
if [ -n "$user_lang_country" ]; then
    if [ none = "$user_lang_country" ]; then
        user_lang=
        user_lang_country=
    else
        check_user_lang_country || fatal 64 'invalid --lang value'
    fi
else
    for user_lang_country in "${LC_ALL:-}" "${LC_CTYPE:-}" "${LANG:-}"; do
        if check_user_lang_country; then
            break
        fi
    done
fi

main() {
    local manpage file topic
    manpage=
    if $path_lookup; then
        case "$1" in
            */*|.|..) ;;
            *)
                if [ help = "$section" -a $# = 1 ]; then
                    case "$1" in
                        *' '*) ;;
                        # TODO: better way to handle spaces than above?
                        *) manpage="$1" ;;
                    esac
                fi
                file="$(which "$1" 2>/dev/null)" || fatal 69 "not found in PATH: $1"
                shift
                set -- "$file" "$@"
                ;;
        esac
    fi
    topic="$(printf /%s "$@" | sed -r 's,^/,,; s,//+,/,g; s,/+$,,')"
    case "$topic" in
        '') topic=/ ;;
        /*) ;;
        *) topic="$(pwd)/$topic" ;;
    esac
    case "$topic" in
        /) ;;
        /*)
            topic="${topic#/}"
            file="/${topic%%/*}"
            topic="${topic#*/}"
            # resolve symlinks
            while [ -e "$file" ]; do
                case "$topic" in
                    '')
                        file="$(readlink -f "$file")"
                        break
                        ;;
                    ./*) topic="${topic#./}" ;;
                    .) topic= ;;
                    */*)
                        file="$(readlink -f "$file")/${topic%%/*}"
                        topic="${topic#*/}"
                        ;;
                    *)
                        file="$(readlink -f "$file")/$topic"
                        topic=
                        ;;
                esac
            done
            # canonicalize leftover topic
            while [ -n "$topic" ]; do
                case "$topic" in
                    ./*) topic="${topic#./}" ;;
                    .) topic= ;;
                    ../*|..) fatal 64 'invalid ".." in TOPIC' ;;
                    */*)
                        file="$file/${topic%%/*}"
                        topic="${topic#*/}"
                        ;;
                    *)
                        file="$file/$topic"
                        topic=
                        ;;
                esac
            done
            topic="$file"
            ;;
        *) fatal 70 'internal error: non-absolute topic' ;;
    esac
    if $show_all; then
        find_helpfile "$section" "$topic" || true
        find_internal_section "$section" "$topic" || true
        if $search; then
            while [ / != "$topic" ]; do
                topic="$(dirname "$topic")"
                find_helpfile "$section" "$topic" || true
                find_internal_section "$section" "$topic" || true
            done
        fi
        if [ -n "$manpage" ]; then
            printf 'man 1 %s\n' "$manpage"
        fi
    else
        if find_helpfile "$section" "$topic"; then
            return 0
        elif find_internal_section "$section" "$topic"; then
            return 0
        elif $search; then
            while [ / != "$topic" ]; do
                topic="$(dirname "$topic")"
                if find_helpfile "$section" "$topic"; then
                    return 0
                elif find_internal_section "$section" "$topic"; then
                    return 0
                fi
            done
        fi
        if [ -n "$manpage" ]; then
            printf 'man 1 %s\n' "$manpage"
            return 0
        fi
        fatal 69 "$section not found: $*"
    fi
}

find_helpfile() { # SECTION TOPIC
    local left right dir
    left=
    right="${2#/}"
    while true; do
        if [ -n "$right" ]; then
            dir="$left/help/$right"
        else
            dir="$left/help"
        fi
        if [ -d "$dir" ]; then
            if $debug_locations; then
                printf 'trying files %s.LANG.FORMAT\n' "$dir/$1" >&2
            fi
            if find_helpfile_lang_format "$dir/$1"; then
                $show_all || return 0
            fi
        elif $debug_locations; then
            printf 'skip non-directory %s\n' "$dir" >&2
        fi
        [ -n "$right" ] || break
        while true; do
            case "$right" in
                ./*|.) fatal 64 'TOPIC component consists of only periods' ;;
                .?*) right="${right#.}" ;;
                *) break ;;
            esac
        done
        case "$right" in
            */*)
                left="$left/${right%%/*}"
                right="${right#*/}"
                ;;
            *)
                left="$left/$right"
                right=
                ;;
        esac
        if [ ! -d "$left" ]; then
            if $debug_locations; then
                printf %s\\n "skip non-directory prefix $left" >&2
            fi
            break
        fi
    done
    if [ $show_all = false -a -n "$first_lang_file" ]; then
        printf 'file %s\n' "$first_lang_file"
        return 0
    fi
    return 2
}

find_helpfile_lang_format() { # BASE
    local lang target format
    # TODO: check both conditions: pref_formats doesn't seem to be used in 'else'
    # make sure first_lang_file is only set if not show_all
    if [ -n "$user_lang" ]; then
        if $show_all; then
            for lang in $user_lang_country $user_lang any; do
                for target in "$1.$lang."?*; do
                    if [ -e "$target" ]; then
                        printf 'file %s\n' "$target"
                    fi
                done
            done
        else
            for format in $pref_formats; do
                for lang in $user_lang_country $user_lang any; do
                    target="$1.$lang.$format"
                    if [ -e "$target" ]; then
                        printf 'file %s\n' "$target"
                        return 0
                    fi
                done
            done
            for lang in $user_lang_country $user_lang any; do
                for target in "$1.$lang."?*; do
                    if [ -e "$target" ]; then
                        printf 'file %s\n' "$target"
                        return 0
                    fi
                done
            done
            if [ -z "$first_lang_file" ]; then
                for target in "$1."[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz].?* "$1."[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz]_[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz].?*; do
                    if [ -e "$target" ]; then
                        first_lang_file="$target"
                        return 1
                    fi
                done
            fi
            return 1
        fi
    else
        for target in "$1.any".?* "$1."[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz].?* "$1."[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz]_[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz].?*; do
            if [ -e "$target" ]; then
                printf 'file %s\n' "$target"
                show_all || return 0
            fi
        done
        return 1
    fi
}

find_internal_section() { # SECTION TOPIC
    # Return 2 if internal section not found.
    if [ ! -f "$2" ]; then
        return 2
    fi
    if $debug_locations; then
        printf 'trying internal sections in %s\n' "$2" >&2
    fi
    if sed -r 's/ +$//' "$2" | find_internal_section_read "$1"; then
        printf 'internal %s %s\n' "$1" "$2"
        return 0
    else
        return 2
    fi
}
find_internal_section_read() { # SECTION <lines
    local line
    while :; do
        read -r line || return 2
        case "$line" in
            "#.$1"|"#.$1 "*)
                return 0
                ;;
            '#'*)
                ;;
            *)
                return 2
                ;;
        esac
    done
}

main "$@"
